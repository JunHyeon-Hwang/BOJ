"""
문제
RGB거리에는 집이 N개 있다. 거리는 선분으로 나타낼 수 있고, 1번 집부터 N번 집이 순서대로 있다.

집은 빨강, 초록, 파랑 중 하나의 색으로 칠해야 한다. 각각의 집을 빨강, 초록, 파랑으로 칠하는 비용이 주어졌을 때, 아래 규칙을 만족하면서 모든 집을 칠하는 비용의 최솟값을 구해보자.

1번 집의 색은 2번 집의 색과 같지 않아야 한다.
N번 집의 색은 N-1번 집의 색과 같지 않아야 한다.
i(2 ≤ i ≤ N-1)번 집의 색은 i-1번, i+1번 집의 색과 같지 않아야 한다.

입력
첫째 줄에 집의 수 N(2 ≤ N ≤ 1,000)이 주어진다. 둘째 줄부터 N개의 줄에는 각 집을 빨강, 초록, 파랑으로 칠하는 비용이 1번 집부터 한 줄에 하나씩 주어진다. 
집을 칠하는 비용은 1,000보다 작거나 같은 자연수이다.

출력
첫째 줄에 모든 집을 칠하는 비용의 최솟값을 출력한다.

===================================================================================================================================================================================================
이 문제의 핵심은 i번째마다 각 집마다 최소가 되는 cost를 계속 계산하는 것이다.
min을 이용하여 쉽게 해결가능하다.
"""

import sys
RED = 0
GREEN = 1
BLUE = 2
N = int(sys.stdin.readline())
cost = []
for _ in range(N):
    cost.append(list(map(int, sys.stdin.readline().split())))

for i in range(1, N):
    ## key point - 각 집은 연속되게 칠하지 못하기 때문에 i-1번째 집은 i번째 색과 달리 해준다.
    cost[i][RED] = min(cost[i-1][GREEN], cost[i-1][BLUE]) + cost[i][RED] ## i 번째, 빨강 집이 칠해졌을때 최소 값
    cost[i][GREEN] = min(cost[i-1][RED], cost[i-1][BLUE]) + cost[i][GREEN] ## i번째 초록집이 칠해졌을때 최소 값
    cost[i][BLUE] = min(cost[i-1][RED], cost[i-1][GREEN]) + cost[i][BLUE] ## i번째 파랑집이 칠해졌을때 최소 값

sys.stdout.write(str(min(cost[N-1][RED], cost[N-1][GREEN], cost[N-1][BLUE]))) ## n번째 집이 빨강 초록 파랑 중 가장 최소가 되도록 하는 값