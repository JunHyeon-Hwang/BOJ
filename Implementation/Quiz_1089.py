"""
문제
스타트링크 타워는 총 10N개 층이 있는 고층 건물이고, 0층부터 10N-1층으로 번호가 매겨져 있다. 층 번호를 숫자 N개로 표현한다. 숫자 N개로 층 번호를 표시할 수 없는 경우 앞에 0을 채운다.

숫자 1개를 표현하려면 전구 5×3개가 필요하고, 이 전구를 세로 크기 5, 가로 크기 3인 격자 형태로 배치한다. 
다음은 0부터 9까지 숫자를 나타낸 것이다. '#'는 불이 켜져있는 전구, '.'는 불이 꺼져있는 전구이다.

###...#.###.###.#.#.###.###.###.###.###
#.#...#...#...#.#.#.#...#.....#.#.#.#.#
#.#...#.###.###.###.###.###...#.###.###
#.#...#.#.....#...#...#.#.#...#.#.#...#
###...#.###.###...#.###.###...#.###.###
엘리베이터에 있는 층 번호 안내판의 상태가 주어진다. 안내판의 각 숫자는 불이 꺼져있는 전구 한 열로 구분되어 있다. 
안내판의 일부 전구는 고장이 나서 항상 꺼져있는 상태이다. 
꺼져있는 전구의 일부가 고장이 났다고 가정할 때, 현재 층 번호 안내판이 나타내고 있다고 볼 수 있는 모든 층 번호의 평균을 구해보자.

입력
첫째 줄에 N이 주어진다. N은 9보다 작거나 같은 자연수이다. 둘째 줄부터 다섯 개의 줄에는 엘리베이터 층 번호 안내판의 상태가 주어진다. 각 문자열의 길이는 4N-1이다.

출력
첫째 줄에 층 번호 안내판이 나타내고 있다고 가정할 수 있는 모든 층 번호의 평균을 출력한다. 만약, 가능한 층 번호가 없는 경우 -1을 출력한다.

정답과의 절대/상대 오차는 10-5까지 허용한다.
======================================================================================================================================================================================

5x3 키패드에서 각 위치가 표현할 수 있는 수 리스트를 만들어 해결해보면 될 듯.
"""
import sys
input = sys.stdin.readline

n = int(input())
LED = [[i for i in input().strip()] for _ in range(5)]

prob = {
    (0,0) : [0,2,3,4,5,6,7,8,9],
    (0,1) : [0,2,3,5,6,7,8,9],
    (0,2) : [0,1,2,3,4,5,6,7,8,9],
    (1,0) : [0,4,5,6,8,9],
    (1,1) : [],
    (1,2) : [0,1,2,3,4,7,8,9],
    (2,0) : [0,2,3,4,5,6,8,9],
    (2,1) : [2,3,4,5,6,8,9],
    (2,2) : [0,1,2,3,4,5,6,7,8,9],
    (3,0) : [0,2,6,8],
    (3,1) : [],
    (3,2) : [0,1,3,4,5,6,7,8,9],
    (4,0) : [0,2,3,5,6,8,9],
    (4,1) : [0,2,3,5,6,8,9],
    (4,2) : [0,1,2,3,4,5,6,7,8,9]
}

def Check(pad):
    pos_num = [i for i in range(10)]

    for i in range(len(pad)):
        for j in range(len(pad[i])):
            remove_nums = []
            if pad[i][j] == '#':
                for p in pos_num:
                    if p not in prob[(i,j)]: 
                        remove_nums.append(p)
                for r in remove_nums:
                    pos_num.remove(r)
    
    return pos_num

numbers = [[] for _ in range(n)]
now_LED = []
for i in range(3, 4*n+1, 4):
    now_LED.append(LED[0][i-3:i])
    now_LED.append(LED[1][i-3:i])
    now_LED.append(LED[2][i-3:i])
    now_LED.append(LED[3][i-3:i])
    now_LED.append(LED[4][i-3:i])

    candidate = Check(now_LED)
    numbers[i//4] = candidate
    ## initialize
    now_LED = []

## Time Complexity Issue
# ## 각 자리의 후보군이 뽑혔으면 BP로 숫자 만들어낸다.
# l = []
# cnt = 0
# total = 0
# def BP(i, sub_res=''):
#     global cnt, total
#     if i ==n:
#         cnt += 1
#         total += int(sub_res)

#         # l.append(int(sub_res))
#         return 
#     for num in numbers[i]:
#         sub_res += str(num)
#         BP(i+1, sub_res)
#         sub_res = sub_res[0:-1]
# BP(0)
# if cnt == 0: print(-1)
# else: print(round(total / cnt, 5))

i =0
result = 0
while i <n:
    digits_sum = 0
    length = 0 
    nums = numbers[i]
    nums = [k * 10**(n-i-1) for k in nums]
    length = len(nums)
    if length ==0:
        result = -1
        break

    
    digits_sum += sum(nums)

    result += digits_sum/length
    i += 1

print(round(result,5))

"""
9
### . ..# .###.###.#.#.###.###.###.###
#.# . ..# ...#...#.#.#.#...#.....#.#.#
#.# . ..# .###.###.###.###.###...#.###
#.# . ..# .#.....#...#...#.#.#...#.#.#
### . ..# .###.###...#.###.###...#.###
0,8 / 0,1,3,4,7,8,9

9
..#.###.###.#.#.###.###.###.###.###
..#...#...#.#.#.#...#.....#.#.#.#.#
..#.###.###.###.###.###...#.###.###
..#.#.....#...#...#.#.#...#.#.#...#
..#.###.###...#.###.###...#.###.###

9
..#.###.###.#.#.###.###.###.###.###
..#...#...#.#.#.#...#....##.#.#.#.#
..#.###.###.###.###.###...#.###.###
..#.#.....#...#...#.#.#...#.#.#...#
..#.###.###...#.###.###..##.###...#


9
..#.###.###.#.#.###.###.###.###.###
..#...#...#.#.#.#...#.....#.#.#.#.#
..#.###.###.###.###.###...#.###.###
..#.#.....#...#...#.#.#...#.#.#...#
..#.###.###...#.###.###..##.###...#

1
...
.#.
...
.#.
...
"""