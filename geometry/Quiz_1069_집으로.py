"""
문제
은진이는 지금 (X, Y)에 있고, (0, 0)에 있는 집으로 가능한 빨리 가려고 한다. 
이동할 수 있는 방법은 다음 두 가지이다.

첫 번째 방법은 걷는것이다. 걸을 때는 1초에 1만큼 움직인다. 
두 번째 방법은 점프하는 것이다. 
점프를 하게 되면, T초에 D만큼 움직인다. 점프는 일직선으로만 할 수 있고, 정확하게 D칸만 움직일 수 있다.

위의 두 가지 방법을 이용해서 집에 돌아오는데 걸리는 시간의 최솟값을 구하는 프로그램을 작성하시오. 
꼭 한 가지 방법만 사용해야 되는것이 아니고, 두 가지 방법을 적절히 조합해서 가장 빠른 시간을 구하는 것이다.

입력
첫째 줄에 네 정수 X, Y, D, T가 주어진다.

출력
첫째 줄에 집에 돌아오는데 걸리는 시간의 최솟값을 출력한다. 절대/상대 오차는 10-9까지 허용한다.
=================================================================================================================================================================
🔥 중요한 점!!
일직선 점프가 0,0 -> 0,5  or 5,0 이런식의 좌표상의 일직선이 아니다. 
대각선으로의 일직선도 가능하다. 

⚪ Point - 최초 점프에는 걷는게 더 빠른지  or 점프하고 되돌아오는게 빠른지 고려하면 되고
            그 후로는 직선으로 만드는게 빠를지 or 삼각형을 만드는 게 빠를지만 고민하면 된다.
            
            두 번의 점프가 이루어지면 무조건 삼각형을 만들 수 있다. 따라서 굳이 점프 후 되돌아 갈 필요가 없다.
"""
import math
X, Y, D, T = map(int, input().split())

l = math.sqrt(X**2 + Y**2)

if l >= D: 
    jump = l//D
    print(float(min(l, jump*T + l-(jump*D), jump*T + T)))
else:
    print(float(min(l, T + D-l, 2*T)))
